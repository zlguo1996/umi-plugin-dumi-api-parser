{
    "type": "Function",
    "name": "useFetch",
    "parameters": [
        {
            "typeString": "string"
        },
        {
            "typeString": "Record<string, any>"
        },
        {
            "typeString": "{useStorageCache?: boolean; data?: Record<string, any>; isEncrypt?: boolean; isFs?: boolean; method?: 'post' | 'POST' | 'get' | 'GET'; metricLoopTime?: boolean; needsGuardianToken?: boolean; tokenKey?: string; compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe?: boolean; retryCount?: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use?: function __type(useSWRNext: {}): function __type(key: string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false' | function __type(): string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false', fetcher: function __type(args: any[]): Data | Promise<Data> | 'null', config: {compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}): {data?: Data; error?: Error; isValidating: boolean; mutate: function __type(data: Data | Promise<Data> | function __type(currentData: Data): Promise<undefined | Data> | undefined | Data, opts: boolean | __type): Promise<Data | undefined>}[]}>): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use?: function __type(useSWRNext: {}): function __type(key: string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false' | function __type(): string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false', fetcher: function __type(args: any[]): Data | Promise<Data> | 'null', config: {compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}): {data?: Data; error?: Error; isValidating: boolean; mutate: function __type(data: Data | Promise<Data> | function __type(currentData: Data): Promise<undefined | Data> | undefined | Data, opts: boolean | __type): Promise<Data | undefined>}[]}>, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use?: function __type(useSWRNext: {}): function __type(key: string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false' | function __type(): string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false', fetcher: function __type(args: any[]): Data | Promise<Data> | 'null', config: {compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}): {data?: Data; error?: Error; isValidating: boolean; mutate: function __type(data: Data | Promise<Data> | function __type(currentData: Data): Promise<undefined | Data> | undefined | Data, opts: boolean | __type): Promise<Data | undefined>}[]}>): void; onSuccess?: function __type(data: Data, key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use?: function __type(useSWRNext: {}): function __type(key: string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false' | function __type(): string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false', fetcher: function __type(args: any[]): Data | Promise<Data> | 'null', config: {compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}): {data?: Data; error?: Error; isValidating: boolean; mutate: function __type(data: Data | Promise<Data> | function __type(currentData: Data): Promise<undefined | Data> | undefined | Data, opts: boolean | __type): Promise<Data | undefined>}[]}>): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use?: function __type(useSWRNext: {}): function __type(key: string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false' | function __type(): string | [any, ] |  | Record<any, any> | 'null' | undefined | 'false', fetcher: function __type(args: any[]): Data | Promise<Data> | 'null', config: {compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}>): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}>, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow; onSuccess?: function __type(data: Data, key: string, config: Readonly): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}>): void; onSuccess?: function __type(data: Data, key: string, config: Readonly<{compare?: function __type(a: undefined | Data, b: undefined | Data): boolean; dedupingInterval?: number; errorRetryCount?: number; errorRetryInterval?: number; fallback?: __type; fallbackData?: Data; fetcher?: Fn; focusThrottleInterval?: number; isOnline?: function __type(): boolean; isPaused?: function __type(): boolean; isVisible?: function __type(): boolean; loadingTimeout?: number; onDiscarded?: function __type(key: string): void; onError?: function __type(err: Error, key: string, config: Readonly): void; onErrorRetry?: function __type(err: Error, key: string, config: Readonly, revalidate: function __type(revalidateOpts: {dedupe: boolean; retryCount: number}): Promise<boolean> | void, revalidateOpts: {dedupe: boolean; retryCount: number}): void; onLoadingSlow?: function __type(key: string, config: Readonly): void; onSuccess; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}>): void; refreshInterval?: number | function __type(latestData: undefined | Data): number; refreshWhenHidden?: boolean; refreshWhenOffline?: boolean; revalidateIfStale?: boolean; revalidateOnFocus?: boolean; revalidateOnMount?: boolean; revalidateOnReconnect?: boolean; shouldRetryOnError?: boolean | function __type(err: Error): boolean; suspense?: boolean; use}): {data?: Data; error?: Error; isValidating: boolean; mutate: function __type(data: Data | Promise<Data> | function __type(currentData: Data): Promise<undefined | Data> | undefined | Data, opts: boolean | __type): Promise<Data | undefined>}[]}"
        }
    ]
}